import{d as w,J as y,B as q,v as b,N as k,y as n,x as d,F as D,E as x,D as C,m as h,z as v,g as A,G as T,r as M,c as B}from"./vue.esm-bundler-D4RNtN6S.js";import{f as L}from"./index-BOnq2-IM.js";import{_ as $}from"./CButton-CYpEF-bO.js";import{_ as z}from"./CCollapseTransition-Dr-u_SKe.js";import{C as F}from"./CKeyValueInput-XMtovjCR.js";import{_ as U}from"./_plugin-vue_export-helper-DlAUqK2U.js";import"./Button-CF0RFvFf.js";import"./use-rtl-DB_faxJd.js";import"./light-DsB5ODev.js";import"./browser-DLIXj5nt.js";import"./is-browser-DqcmxZSF.js";import"./icon-switch.cssr-CS-aOSlJ.js";import"./resolve-slot-BBjw-So6.js";import"./use-style-DC-6GAXR.js";import"./FadeInExpandTransition-LhRfDe22.js";import"./Loading-Ch5S3HjA.js";import"./use-memo-CglecHn5.js";import"./use-form-item-BaX4b55j.js";import"./light-CaBpc4YN.js";import"./use-css-vars-class-BoK1eXI1.js";import"./color-to-class-B0iQgAn2.js";import"./call-f2ri57Kd.js";import"./fade-in-height-expand.cssr-BiZZSMP_.js";import"./light-C7NmY139.js";import"./CFormField-BTZO6Pfe.js";import"./CIcon-BdIW6TD_.js";import"./CInput-JyLJ_8RY.js";import"./Input-DEy15p9s.js";import"./Scrollbar-BbWWFAp8.js";import"./fade-in.cssr-DJOFltAV.js";import"./VResizeObserver-DllAtjZA.js";import"./index-Xn0jilRV.js";import"./delegate-AmuGJuoF.js";import"./light-RknvjviJ.js";import"./get-precise-event-target-DhO46Lpt.js";import"./Suffix-BjoWbega.js";import"./Icon-CrmNSR1a.js";import"./replaceable-DM1aDluB.js";import"./upperFirst-CgVWOQVP.js";import"./toString-Vm_cEZ4d.js";import"./light-3lQabVNk.js";import"./use-locale-CfrJhm3r.js";import"./enUS-CW6P5ZC_.js";import"./use-merged-state-CUYpy2WA.js";const S={class:"c-key-value-list-input"},N={key:0,class:"c-key-value-list-input__list"},_=w({__name:"CKeyValueListInput",props:{items:{},id:{},hasError:{type:Boolean,default:!1},hasKeyError:{type:Function,default:()=>!1},hasValueError:{type:Function,default:()=>!1},isDisabled:{type:Boolean,default:!1},addLabel:{default:"Add"},keyLabel:{default:"Key"},valueLabel:{default:"Value"},hasLabels:{type:Boolean,default:!0},hasIndexes:{type:Boolean,default:!0}},emits:["update:items","add"],setup(s,{emit:u}){const a=s,l=u;function o(e,r){if(a.isDisabled)return;const i=[...a.items];i.splice(e,1,r),l("update:items",i)}function m(e){if(a.isDisabled)return;const r=[...a.items];r.splice(e,1),l("update:items",r)}function c(){a.isDisabled||a.hasError||l("add")}return(e,r)=>(d(),y("div",S,[q(z,{show:e.items.length>0},{default:n(()=>[e.items.length>0?(d(),y("div",N,[(d(!0),y(D,null,x(e.items,(i,t)=>(d(),b(F,{id:e.id,key:t,class:"c-key-value-list-input__item",item:i,"is-disabled":e.isDisabled,index:e.hasIndexes?t:void 0,"has-key-error":e.hasError&&e.hasKeyError(t),"has-value-error":e.hasError&&e.hasValueError(t),"key-label":e.keyLabel,"value-label":e.valueLabel,"has-labels":e.hasLabels,"has-delete":!0,"onUpdate:item":p=>o(t,p),onDelete:()=>m(t)},C({"key-error":n(()=>[h(e.$slots,"key-error",v({ref_for:!0},{index:t}),void 0,!0)]),"value-error":n(()=>[h(e.$slots,"value-error",v({ref_for:!0},{index:t}),void 0,!0)]),_:2},[e.$slots.index?{name:"index",fn:n(()=>[h(e.$slots,"index",v({ref_for:!0},{index:t}),void 0,!0)]),key:"0"}:void 0]),1032,["id","item","is-disabled","index","has-key-error","has-value-error","key-label","value-label","has-labels","onUpdate:item","onDelete"]))),128))])):k("",!0)]),_:3},8,["show"]),e.isDisabled?k("",!0):(d(),b($,{key:0,class:"c-key-value-list-input__add",size:"small",disabled:e.hasError,onClick:c},{default:n(()=>[A(T(e.addLabel),1)]),_:1},8,["disabled"]))]))}}),g=U(_,[["__scopeId","data-v-d31dae61"]]);_.__docgenInfo={exportName:"default",displayName:"CKeyValueListInput",description:"",tags:{},props:[{name:"items",description:"Array of key-value items to be displayed in the list.",required:!0,type:{name:"Array",elements:[{name:"KeyValueItem"}]}},{name:"id",description:"Unique identifier for the key-value list input component.",required:!0,type:{name:"string"}},{name:"hasError",description:"Whether the component has an error state.",required:!1,type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"hasKeyError",description:"A function to determine if a key has an error at a specific index.",required:!1,type:{name:"TSFunctionType"},defaultValue:{func:!1,value:"() => false"}},{name:"hasValueError",description:"A function to determine if a value has an error at a specific index.",required:!1,type:{name:"TSFunctionType"},defaultValue:{func:!1,value:"() => false"}},{name:"isDisabled",description:"Whether the key-value list input is disabled.",required:!1,type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"addLabel",description:'Label for the "Add" button to add new key-value pairs.',required:!1,type:{name:"string"},defaultValue:{func:!1,value:"'Add'"}},{name:"keyLabel",description:"Label for the key field.",required:!1,type:{name:"string"},defaultValue:{func:!1,value:"'Key'"}},{name:"valueLabel",description:"Label for the value field.",required:!1,type:{name:"string"},defaultValue:{func:!1,value:"'Value'"}},{name:"hasLabels",description:"Whether labels are shown for key and value fields.",required:!1,type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"hasIndexes",description:"Whether to show indexes for each key-value pair in the list.",required:!1,type:{name:"boolean"},defaultValue:{func:!1,value:"true"}}],events:[{name:"update:items",type:{names:["Array"],elements:[{name:"KeyValueItem"}]},description:"Emitted when the list of key-value items is updated."},{name:"add",description:"Emitted when a new key-value item is added."}],slots:[{name:"index",scoped:!0,bindings:[{name:"index",title:"binding"}]},{name:"key-error",scoped:!0,bindings:[{name:"index",title:"binding"}]},{name:"value-error",scoped:!0,bindings:[{name:"index",title:"binding"}]}],sourceFiles:["/home/runner/work/npm-pew-pew/npm-pew-pew/src/components/CKeyValueListInput/CKeyValueListInput.vue"]};const Ae={title:"Components/KeyValueListInput",component:g,tags:["autodocs"],decorators:[s=>({components:{story:s},template:'<div style="max-width: 600px"><story/></div>'})],argTypes:{"key-error":{control:!1,description:"Errors slot for key."},"value-error":{control:!1,description:"Errors slot for value."},items:{control:!1},id:{control:"text"},hasKeyError:{control:!1},hasValueError:{control:!1},addLabel:{control:"text"},keyLabel:{control:"text"},valueLabel:{control:"text"},onAdd:{table:{disable:!0}},"onUpdate:items":{table:{disable:!0}}},parameters:{docs:{description:{component:"The CKeyValueListInput component allows users to manage a dynamic list of key-value pairs. It supports adding, editing, and deleting items with customizable labels for keys and values. The component includes error handling, tooltips, and flexibility for controlling the visibility of item indexes, keys, and delete actions."}}},render:s=>({components:{CKeyValueListInput:g},setup(){const u={key:"",value:""},a=M([u]),l={key:{required:e=>e.length>0,invalid:e=>/^[a-z][-_a-z0-9]{3,62}$/.test(e)},value:{required:e=>e.length>0,invalid:e=>/^[a-z][-_a-z0-9]{3,62}$/.test(e)}};function o(e,r,i){const t=a.value[r][e],p=Object.keys(l[e]).filter(K=>!l[e][K](t));return p.length?i?p.includes(i):!0:!1}const m=B(()=>a.value.some((e,r)=>o("key",r)||o("value",r)));function c(){var e;(e=s.onAdd)==null||e.call(s),!m.value&&a.value.push(u)}return{args:s,metadata:a,hasMetadataError:o,hasError:m,addItem:c}},template:`
      <CKeyValueListInput
        :id="args.fieldId"
        v-model:items="metadata"
        :is-disabled="args.isDisabled"
        :add-label="args.addLabel"
        :key-label="args.keyLabel"
        :value-label="args.valueLabel"
        :has-labels="args.hasLabels"
        :hasIndexes:="args.hasIndexes"
        :has-error="args.hasError || hasError"
        :has-key-error="paramIndex => hasMetadataError('key', paramIndex)"
        :has-value-error="paramIndex => hasMetadataError('value', paramIndex)"
        @update:items="args['onUpdate:items']"
        @add="addItem"
      >
        <template #key-error="{ index }">
          <template v-if="hasMetadataError('key', index, 'required')">
            Key is required
          </template>
          <template v-else-if="hasMetadataError('key', index, 'invalid')">
            Key is invalid
          </template>
        </template>
        <template #value-error="{ index }">
          <template v-if="hasMetadataError('value', index, 'required')">
            Value is required
          </template>
          <template v-else-if="hasMetadataError('value', index, 'invalid')">
            Value is invalid
          </template>
        </template>
      </CKeyValueListInput>
    `})},f={args:{id:"metadata",index:void 0,addLabel:"Add item",keyLabel:"Data key",valueLabel:"Data value",onAdd:L(),"onUpdate:items":L()}};var E,I,V;f.parameters={...f.parameters,docs:{...(E=f.parameters)==null?void 0:E.docs,source:{originalSource:`{
  args: {
    id: 'metadata',
    index: undefined,
    addLabel: 'Add item',
    keyLabel: 'Data key',
    valueLabel: 'Data value',
    onAdd: fn(),
    'onUpdate:items': fn()
  }
}`,...(V=(I=f.parameters)==null?void 0:I.docs)==null?void 0:V.source}}};const Te=["Default"];export{f as Default,Te as __namedExportsOrder,Ae as default};
